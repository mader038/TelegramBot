import datetime
import sqlite3
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery, KeyboardButton, \
    ReplyKeyboardMarkup
import databaseBot
from databaseBot import checker_people, return_all, birth_now_months, owner_birth, search_birth, check_date_birth, \
    deleter_friend, all_users, all_people, get_holidays, translate_text
from formules import month_to_number, number_to_month, calc_age, days_until_birthday, birth_nearests

BOT_TOKEN = '6832196238:AAHOMT7xy4omFntn2k-pjn6-M4A8Q3NO3Xs'

admins_id = [1022869374]

storage = MemoryStorage()

bot = Bot(BOT_TOKEN)
dp = Dispatcher(storage=storage)

command1 = KeyboardButton(text='üéâ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ', resize_keyboard=True)
command2 = KeyboardButton(text='üçæ –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', resize_keyboard=True)
command3 = KeyboardButton(text='üéä –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è', resize_keyboard=True)
command4 = KeyboardButton(text='–ö–æ–≥–¥–∞ –º–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? ü§î', resize_keyboard=True)
command5 = KeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∞ üíã', resize_keyboard=True)
command6 = KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ üòï', resize_keyboard=True)
command9 = KeyboardButton(text='ü•≥ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è', resize_keyboard=True)
command0 = KeyboardButton(text='–ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ü§©', resize_keyboard=True)
command7 = KeyboardButton(text='üîó –ü–æ–º–æ—â—å', resize_keyboard=True)

keyboard_all = ReplyKeyboardMarkup(keyboard=[[command1, command4],
                                             [command2, command9, command0, command5],
                                             [command3, command6],
                                             [command7]],
                                   resize_keyboard=True)


class FSMFillForm(StatesGroup):
    fill_firstname = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    fill_lastname = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
    fill_gender = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    fill_age = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    fill_day = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–Ω—è
    fill_month = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    fill_year = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞


class registerFSM(StatesGroup):
    fill_day_birth = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–Ω—è
    fill_month_birth = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    fill_year_birth = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ–¥–∞


class deleterFSM(StatesGroup):
    fill_id_friend = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ id


@dp.message(CommandStart())  # –•–µ–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
async def process_start_command(message: Message):
    if checker_people(message.from_user.id):
        print(f'–£–æ–ø, –Ω–æ–≤—ã–π —é–∑–µ—Ä {message.from_user.username} {message.from_user.first_name} {message.from_user.id}')
        register = InlineKeyboardButton(
            text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! üî•',
            callback_data='register_pressed'
        )
        regist = InlineKeyboardMarkup(
            inline_keyboard=[[register]]
        )
        await message.answer(
            text='–ü—Ä–∏–≤–µ—Ç!! –Ø —Ç–≤–æ–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–Ω—è–º —Ä–æ–∂–¥–µ–Ω–∏—è–º!\n'
                 '–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º —Å —Ç–æ–±–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å, —è –ø–æ–ø—Ä–æ—à—É —Ç–µ–±—è –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. üòù\n'
                 '–û—Ç —Ç–µ–±—è –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è! –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ) ‚¨áÔ∏è',
            reply_markup=regist
        )
    else:
        returned_user = InlineKeyboardButton(
            text='–í –º–µ–Ω—é! ü•≥',
            callback_data='returns_pressed'
        )
        returned = InlineKeyboardMarkup(
            inline_keyboard=[[returned_user]]
        )
        await message.answer(
            text='–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∏–∂—É —Ç—ã —É–∂–µ –∫–æ–≥–¥–∞ —Ç–æ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n'
                 '–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏! üòâ',
            reply_markup=returned
        )


@dp.callback_query(F.data == 'returns_pressed')
async def help2(callback: CallbackQuery):
    help_bot = InlineKeyboardButton(
        text='üîó –ü–æ–º–æ—â—å',
        callback_data='help_pressed'
    )
    admin_function = InlineKeyboardButton(
        text='üö® –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å',
        callback_data='admin_pressed'
    )
    if callback.from_user.id in admins_id:
        menu_button = InlineKeyboardMarkup(
            inline_keyboard=[[help_bot],
                             [admin_function]]
        )
    else:
        menu_button = InlineKeyboardMarkup(
            inline_keyboard=[[help_bot]]
        )
    await callback.message.answer(
        text='–í–∂—É—É—É—Ö! ‚Äçüå´Ô∏è',
        reply_markup=keyboard_all
    )
    await callback.message.answer(
        text='–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é!\n'
             '–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é —Ç–µ–±–µ –∫–æ–º–∞–Ω–¥—É\n'
             '–ò —è —Ç—É—Ç –∂–µ —Ç–µ–±–µ –æ—Ç–≤–µ—á—É. üòâ',
        reply_markup=menu_button
    )


@dp.callback_query(F.data == 'admin_pressed')
async def admin_panel(callback: CallbackQuery):
    user_button = InlineKeyboardButton(
        text='üü¢ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (user)',
        callback_data='us_pressed'
    )
    people_button = InlineKeyboardButton(
        text='üî¥ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (people)',
        callback_data='pe_pressed'
    )
    admin_buttons = InlineKeyboardMarkup(
        inline_keyboard=[[user_button],
                         [people_button]]
    )
    if callback.from_user.id in admins_id:
        await callback.message.answer(
            text=f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {callback.from_user.username}, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π-–∏–µ üòâ',
            reply_markup=admin_buttons
        )
    else:
        await callback.message.reply(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å')


@dp.callback_query(F.data == 'us_pressed')
async def us_table(callback: CallbackQuery):
    if callback.from_user.id in admins_id:
        result = all_users()
        text = ''
        for elem in result:
            text += f'{elem[0]}:  {elem[1]}, {elem[2]}, {elem[3]}, {elem[4]} {elem[5]} {elem[6]}, {elem[7]}\n'
        await callback.message.answer(text)
    else:
        await callback.message.reply(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å')


@dp.callback_query(F.data == 'pe_pressed')
async def pe_table(callback: CallbackQuery):
    if callback.from_user.id in admins_id:
        result = all_people()
        text = ''
        for elem in result:
            text += f'{elem[0]}:  {elem[1]}, {elem[3]}, {elem[4]}\n'
        await callback.message.answer(text)
    else:
        await callback.message.reply(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å')


@dp.callback_query(F.data == 'help_pressed')
async def help2(callback: CallbackQuery):
    await callback.message.answer(
        text='–ü—Ä–∏–≤–µ—Ç üëã, –≤–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!!\n'
             '1. /births_in_now_months - –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.\n'
             '2. /births_nearest - –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
             '3. /every_births - –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π.\n'
             '4. /my_births - –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
             '5. /delete_friend - –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.\n'
             '6. /holidays - –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è.\n'
             '7. /holidays_nearest - –ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫.\n\n'
             '–ï—Å–ª–∏ —á—Ç–æ, –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏! ‚ù§\n\n'
             'üö® –ß—Ç–æ–±—ã –≤–∞–º –Ω–µ –≤—ã–≤–æ–¥–∏–ª–æ, —á—Ç–æ —É –≤–∞—Å –ø—É—Å—Ç–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö!\n'
             '/add_births - –î–æ–±–∞–≤—å –¥—Ä—É–≥–∞ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫!',
        reply_markup=keyboard_all
    )


@dp.message(Command(commands='help'))
@dp.message(F.text == 'üîó –ü–æ–º–æ—â—å')
async def help(message: Message):
    await message.answer(
        text='–ü—Ä–∏–≤–µ—Ç üëã, –≤–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã!!\n'
             '1. /births_in_now_months - –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ.\n'
             '2. /births_nearest - –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
             '3. /every_births - –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –¥—Ä—É–∑–µ–π.\n'
             '4. /my_births - –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Ç–≤–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è.\n'
             '5. /delete_friend - –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.\n'
             '6. /holidays - –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è.\n'
             '7. /holidays_nearest - –ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫.\n\n'
             '–ï—Å–ª–∏ —á—Ç–æ, –ø–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏, —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –Ω–∏–º–∏! ‚ù§\n\n'
             'üö® –ß—Ç–æ–±—ã –≤–∞–º –Ω–µ –≤—ã–≤–æ–¥–∏–ª–æ, —á—Ç–æ —É –≤–∞—Å –ø—É—Å—Ç–æ —Å—Ä–µ–¥–∏ –¥—Ä—É–∑–µ–π, —Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∏—Ö!\n'
             '/add_births - –î–æ–±–∞–≤—å –¥—Ä—É–≥–∞ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫!',
        reply_markup=keyboard_all
    )


@dp.message(Command(commands='holidays'))
@dp.message(F.text == 'ü•≥ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è')
async def holiday_today(message: Message):
    holidays = get_holidays(datetime.datetime.today().year, int(datetime.datetime.today().month),
                            datetime.datetime.today().day)
    if holidays:
        text = f"–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ {datetime.datetime.today().date()}:\n"
        for holiday in holidays:
            text += f"- {translate_text(holiday['name'])}\n"
        await message.answer(text)
    else:
        await message.answer("–°–µ–≥–æ–¥–Ω—è –≤ –†–æ—Å—Å–∏–∏ –Ω–µ—Ç—É –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤. üòû")


@dp.message(Command(commands='holidays_nearest'))
@dp.message(F.text == '–ë–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫ ü§©')
async def holiday_nearest(message: Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...')
    flag = True
    start = datetime.datetime.today().date()
    count = 1
    while flag:
        holidays = get_holidays(start.year, int(start.month), start.day)
        if holidays:
            text = f"–°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –Ω–∞ {start}:\n"
            for holiday in holidays:
                text += f"- {translate_text(holiday['name'])}\n"
            await message.answer(text)
            break
        else:
            start += datetime.timedelta(days=count)
            count += 1


@dp.message(Command(commands='births_in_now_months'))
@dp.message(F.text == 'üéâ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ')
async def birth_in_now_months(message: Message):
    result = birth_now_months(message.from_user.id, number_to_month(datetime.date.today().month))
    text = f'{databaseBot.months_for_data.get(number_to_month(datetime.date.today().month))}\n'
    if result == list():
        text += f'–ü–æ—Ö–æ–∂–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç..'
        await message.answer(text)
    else:
        for elem in result:
            text += f'‚Ä¢ {elem[1]} {elem[2]}, {elem[4]} {databaseBot.months_data.get(elem[5])}' \
                    f', {calc_age(elem[6], month_to_number(elem[5]), elem[4])} –ª–µ—Ç\n'
        await message.answer(text)


@dp.message(Command(commands='every_births'))
@dp.message(F.text == 'üéä –í—Å–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è')
async def every_births(message: Message):
    for mounth_num in range(1, 13):
        result = birth_now_months(message.from_user.id, number_to_month(mounth_num))
        text = f'{databaseBot.months_for_data.get(number_to_month(mounth_num))}\n'
        if result == list():
            text += f'–ü–æ—Ö–æ–∂–µ —Ç—É—Ç –Ω–∏—á–µ–≥–æ –Ω–µ—Ç..'
            await message.answer(text)
        else:
            for elem in result:
                text += f'‚Ä¢ {elem[1]} {elem[2]}, {elem[4]} {databaseBot.months_data.get(elem[5])}' \
                        f', {calc_age(elem[6], month_to_number(elem[5]), elem[4])} –ª–µ—Ç\n'
            await message.answer(text)


@dp.message(Command(commands='my_births'))
@dp.message(F.text == '–ö–æ–≥–¥–∞ –º–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è? ü§î')
async def every_births(message: Message):
    id_user = message.from_user.id
    if checker_people(id_user):
        await message.answer(
            f'–ü–æ—Ö–æ–∂–µ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å..\n'
            f'–ù–∞–ø–∏—à–∏—Ç–µ /start –∏ –ø—Ä–æ–π–¥–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.'
        )
    else:
        await message.answer(
            f'–î–æ –≤–∞—à–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å '
            f'{days_until_birthday(owner_birth(id_user)[2], month_to_number(owner_birth(id_user)[1]), owner_birth(id_user)[0])}'
            f'–¥. ü•∞')


@dp.message(Command(commands='births_nearest'))
@dp.message(F.text == 'üçæ –ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è')
async def birth_nearest(message: Message):
    gender = ''
    friends = return_all(message.from_user.id)
    days = list()
    for elem in friends:
        days.append(days_until_birthday(elem[6], month_to_number(elem[5]), elem[4]))
    if days != list():
        calculator = birth_nearests(min(days))
        search = search_birth(calculator[2], number_to_month(int(calculator[1])), message.from_user.id)
        for people in search:
            if people[3] == 'male':
                gender = '–µ–≥–æ'
            else:
                gender = '–µ–µ'
            await message.answer(
                f'–ë–ª–∏–∂–∞–π—à–∏–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –±—É–¥–µ—Ç —É {people[1]} {people[2]}!\n'
                f'–î–∞—Ç–∞ {gender} –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è: {people[4]} {databaseBot.months_data.get(people[5])} {people[6]} –≥–æ–¥–∞.\n'
                f'–î–æ —ç—Ç–æ–π –¥–∞—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å {min(days)} —Å—É—Ç–æ–∫!'
            )
    else:
        await message.answer(
            f'–ü–æ—Ö–æ–∂–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.. üòû\n'
            f'–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_births üòÅ'
        )


@dp.message(Command(commands='delete_friend'))
@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ üòï')
async def delete_birth(message: Message, state: FSMContext):
    friends = ''
    if return_all(message.from_user.id) != list():
        await message.answer('–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞? –•–æ—Ä–æ—à–æ, –≤–æ—Ç –≤–∞—à–∏ –¥—Ä—É–∑—å—è:')
        for elem in return_all(message.from_user.id):
            friends += f'ID: {elem[0]} - {elem[1]} {elem[2]} ({elem[4]}.{month_to_number(elem[5])}.{elem[6]})\n'
        await message.answer(friends)
        await message.answer('–•–æ—Ä–æ—à–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞!\n'
                             '–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel')
        await state.set_state(deleterFSM.fill_id_friend)
    else:
        await message.answer(
            f'–ü–æ—Ö–æ–∂–µ –≤–∞—à —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.. üòû\n'
            f'–î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–∑–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_births üòÅ'
        )


# –î–∞–ª—å—à–µ –∏–¥—É—Ç –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π.


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ –ª—é–±—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö,
# –∫—Ä–æ–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(Command(commands='cancel'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(
        text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
             '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∞–Ω–∫–µ—Ç—ã - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_births –∏–ª–∏ /delete_friend'
    )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()


#  –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –ª–æ–≤–∏—Ç id –¥—Ä—É–≥–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∏–∑ –±–¥.
@dp.message(StateFilter(deleterFSM.fill_id_friend),
            lambda x: x.text.isdigit())
async def process_delete(message: Message, state: FSMContext):
    id_text = int(message.text)
    if deleter_friend(message.from_user.id, id_text):
        await message.answer('–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!')
    else:
        await message.answer('–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π ID, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! ü§ï\n'
                             '–î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /delete_friend')
    await state.clear()


@dp.message(StateFilter(deleterFSM.fill_id_friend))
async def warning_not_day(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ ID\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –≤ —Ü–∏—Ñ—Ä–∞—Ö –¥–æ –¥–µ—Ñ–∏—Å–∞.\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel" –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
# –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —Å–æ–æ–±—â–∞—Ç—å, —á—Ç–æ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(Command(commands='cancel'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(
        text='–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ.\n\n'
             '–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_births'
    )


@dp.callback_query(F.data == 'register_pressed')
async def process_fillform_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–ï–ù–¨ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è.')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(registerFSM.fill_day_birth)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ–Ω—å
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
@dp.message(StateFilter(registerFSM.fill_day_birth),
            lambda x: x.text.isdigit() and 1 <= int(x.text) <= 31)
async def process_day_senter(message: Message, state: FSMContext):
    await state.update_data(day_own=message.text)
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    january_button = InlineKeyboardButton(
        text='–Ø–Ω–≤–∞—Ä—å',
        callback_data='January'
    )
    february_button = InlineKeyboardButton(
        text='–§–µ–≤—Ä–∞–ª—å',
        callback_data='February'
    )
    march_button = InlineKeyboardButton(
        text='–ú–∞—Ä—Ç',
        callback_data='March'
    )
    april_button = InlineKeyboardButton(
        text='–ê–ø—Ä–µ–ª—å',
        callback_data='April'
    )
    may_button = InlineKeyboardButton(
        text='–ú–∞–π',
        callback_data='May'
    )
    june_button = InlineKeyboardButton(
        text='–ò—é–Ω—å',
        callback_data='June'
    )
    july_button = InlineKeyboardButton(
        text='–ò—é–ª—å',
        callback_data='July'
    )
    august_button = InlineKeyboardButton(
        text='–ê–≤–≥—É—Å—Ç',
        callback_data='August'
    )
    september_button = InlineKeyboardButton(
        text='–°–µ–Ω—Ç—è–±—Ä—å',
        callback_data='September'
    )
    october_button = InlineKeyboardButton(
        text='–û–∫—Ç—è–±—Ä—å',
        callback_data='October'
    )
    november_button = InlineKeyboardButton(
        text='–ù–æ—è–±—Ä—å',
        callback_data='November'
    )
    decemver_button = InlineKeyboardButton(
        text='–î–µ–∫–∞–±—Ä—å',
        callback_data='December'
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard: list[list[InlineKeyboardButton]] = [
        [january_button, february_button],
        [march_button, april_button],
        [may_button, june_button],
        [july_button, august_button],
        [september_button, october_button],
        [november_button, decemver_button]
    ]
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü',
        reply_markup=markup
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    await state.set_state(registerFSM.fill_month_birth)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω—è
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(registerFSM.fill_day_birth))
async def warning_not_day(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–µ–Ω—å\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–ï–ù–¨ (–Ω–µ –º–µ—Å—è—Ü, –Ω–µ –≥–æ–¥)\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–¥–∞
@dp.callback_query(StateFilter(registerFSM.fill_month_birth),
                   F.data.in_(['January', 'February', 'March', 'April', 'May', 'June',
                               'July', 'August', 'September', 'October', 'November', 'December']))
async def process_months_presser(callback: CallbackQuery, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –ø–æ –∫–ª—é—á—É "months"
    await state.update_data(month_own=callback.data)
    await callback.message.delete()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è
    # –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        text='–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è'
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞
    await state.set_state(registerFSM.fill_year_birth)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(registerFSM.fill_month_birth))
async def warning_not_education(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
             '–∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≥–æ–¥
@dp.message(StateFilter(registerFSM.fill_year_birth),
            lambda x: x.text.isdigit() and 1900 <= int(x.text) <= 2024)
async def process_day_sent(message: Message, state: FSMContext):
    await state.update_data(year_own=message.text)
    if check_date_birth(int((await state.get_data()).get('day_own')), str((await state.get_data()).get('month_own')),
                        int((await state.get_data()).get('year_own'))):
        con = sqlite3.connect('birthdates.db')

        cur = con.cursor()

        count = cur.execute("""INSERT INTO people (userid, nameuser, name, dayy, monthh, year)
                VALUES (?, ?, ?, ?, ?, ?);""", (str(message.from_user.id),
                                                str(message.from_user.first_name),
                                                str(message.from_user.username),
                                                (await state.get_data()).get('day_own'),
                                                (await state.get_data()).get('month_own'),
                                                (await state.get_data()).get('year_own')))
        con.commit()
        con.close()
        returned_user = InlineKeyboardButton(
            text='–í –º–µ–Ω—é! ü•≥',
            callback_data='returns_pressed'
        )
        returned = InlineKeyboardMarkup(
            inline_keyboard=[[returned_user]]
        )
        await message.answer(
            text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!',
            reply_markup=returned
        )
    else:
        register = InlineKeyboardButton(
            text='–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! üî•',
            callback_data='register_pressed'
        )
        regist = InlineKeyboardMarkup(
            inline_keyboard=[[register]]
        )
        await message.answer(text='–ü–æ—Ö–æ–∂–µ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ! ü´¢',
                             reply_markup=regist)
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
# –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(registerFSM.fill_year_birth))
async def warning_not_year(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ì–û–î!\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É /add_births
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
@dp.message(Command(commands='add_births'), StateFilter(default_state))
@dp.message(F.text == '–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∞ üíã')
async def process_fillform_command(message: Message, state: FSMContext):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
    await state.set_state(FSMFillForm.fill_firstname)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
@dp.message(StateFilter(FSMFillForm.fill_firstname), F.text.isalpha())
async def process_firstname_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "firstname"
    await state.update_data(firstname=message.text)
    await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥—Ä—É–≥–∞')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
    await state.set_state(FSMFillForm.fill_lastname)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_firstname))
async def warning_not_firstname(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥—Ä—É–≥–∞\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@dp.message(StateFilter(FSMFillForm.fill_lastname), F.text.isalpha())
async def process_name_sent(message: Message, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "lastname"
    await state.update_data(lastname=message.text)
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    male_button = InlineKeyboardButton(
        text='–ú—É–∂—Å–∫–æ–π ‚ôÇ',
        callback_data='male'
    )
    female_button = InlineKeyboardButton(
        text='–ñ–µ–Ω—Å–∫–∏–π ‚ôÄ',
        callback_data='female'
    )
    keyboard: list[list[InlineKeyboardButton]] = [[male_button, female_button]]  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)  # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª –¥—Ä—É–≥–∞',
        reply_markup=markup
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
    await state.set_state(FSMFillForm.fill_gender)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_lastname))
async def warning_not_lastname(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–∞–º–∏–ª–∏—é\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –¥—Ä—É–≥–∞\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏
# –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –¥–Ω—è
@dp.callback_query(StateFilter(FSMFillForm.fill_gender),
                   F.data.in_(['male', 'female']))
async def process_gender_press(callback: CallbackQuery, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª (callback.data –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ –∫–ª—é—á—É "gender"
    await state.update_data(gender=callback.data)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()
    await callback.message.answer(
        text='–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –î–ï–ù–¨ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞'
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–Ω—è
    await state.set_state(FSMFillForm.fill_day)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_gender))
async def warning_not_gender(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
             '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞\n\n–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å '
             '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ–Ω—å
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
@dp.message(StateFilter(FSMFillForm.fill_day),
            lambda x: x.text.isdigit() and 1 <= int(x.text) <= 31)
async def process_day_sent(message: Message, state: FSMContext):
    await state.update_data(days=message.text)
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    january_button = InlineKeyboardButton(
        text='–Ø–Ω–≤–∞—Ä—å',
        callback_data='January'
    )
    february_button = InlineKeyboardButton(
        text='–§–µ–≤—Ä–∞–ª—å',
        callback_data='February'
    )
    march_button = InlineKeyboardButton(
        text='–ú–∞—Ä—Ç',
        callback_data='March'
    )
    april_button = InlineKeyboardButton(
        text='–ê–ø—Ä–µ–ª—å',
        callback_data='April'
    )
    may_button = InlineKeyboardButton(
        text='–ú–∞–π',
        callback_data='May'
    )
    june_button = InlineKeyboardButton(
        text='–ò—é–Ω—å',
        callback_data='June'
    )
    july_button = InlineKeyboardButton(
        text='–ò—é–ª—å',
        callback_data='July'
    )
    august_button = InlineKeyboardButton(
        text='–ê–≤–≥—É—Å—Ç',
        callback_data='August'
    )
    september_button = InlineKeyboardButton(
        text='–°–µ–Ω—Ç—è–±—Ä—å',
        callback_data='September'
    )
    october_button = InlineKeyboardButton(
        text='–û–∫—Ç—è–±—Ä—å',
        callback_data='October'
    )
    november_button = InlineKeyboardButton(
        text='–ù–æ—è–±—Ä—å',
        callback_data='November'
    )
    decemver_button = InlineKeyboardButton(
        text='–î–µ–∫–∞–±—Ä—å',
        callback_data='December'
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard: list[list[InlineKeyboardButton]] = [
        [january_button, february_button],
        [march_button, april_button],
        [may_button, june_button],
        [july_button, august_button],
        [september_button, october_button],
        [november_button, decemver_button]
    ]
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer(
        text='–°–ø–∞—Å–∏–±–æ!\n\n–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü',
        reply_markup=markup
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    await state.set_state(FSMFillForm.fill_month)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–Ω—è
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_day))
async def warning_not_day(message: Message):
    await message.answer(
        text='–¢–æ, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –¥–µ–Ω—å\n\n'
             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –î–ï–ù–¨ (–Ω–µ –º–µ—Å—è—Ü, –Ω–µ –≥–æ–¥)\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –º–µ—Å—è—Ü
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–æ–¥–∞
@dp.callback_query(StateFilter(FSMFillForm.fill_month),
                   F.data.in_(['January', 'February', 'March', 'April', 'May', 'June',
                               'July', 'August', 'September', 'October', 'November', 'December']))
async def process_education_press(callback: CallbackQuery, state: FSMContext):
    # C–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –ø–æ –∫–ª—é—á—É "months"
    await state.update_data(months=callback.data)
    await callback.message.delete()
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è—è
    # –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.answer(
        text='–°–ø–∞—Å–∏–±–æ! –ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞'
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –∏–ª–∏ –Ω–µ—Ç
    await state.set_state(FSMFillForm.fill_year)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_month))
async def warning_not_education(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–µ—Å—è—Ü–∞\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '
             '–∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –≥–æ–¥
@dp.message(StateFilter(FSMFillForm.fill_year),
            lambda x: x.text.isdigit() and 1900 <= int(x.text) <= 2024)
async def process_day_sent(message: Message, state: FSMContext):
    await state.update_data(years=message.text)
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
    if check_date_birth((await state.get_data()).get('days'), (await state.get_data()).get('months'),
                        (await state.get_data()).get('years')):
        con = sqlite3.connect('birthdates.db')

        cur = con.cursor()

        count = cur.execute("""INSERT INTO users (firstname, lastname, gender, day, month, year, inviter)
                VALUES (?, ?, ?, ?, ?, ?, ?);""", ((await state.get_data()).get('firstname'),
                                                   (await state.get_data()).get('lastname'),
                                                   (await state.get_data()).get('gender'),
                                                   (await state.get_data()).get('days'),
                                                   (await state.get_data()).get('months'),
                                                   (await state.get_data()).get('years'),
                                                   str(message.from_user.id)))
        con.commit()
        await message.answer(
            text='–î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!'
        )
    else:
        await message.answer('–ü–æ—Ö–æ–∂–µ, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ! ü§ï')
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ
# –Ω–æ–≤–æ—Å—Ç–µ–π –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
@dp.message(StateFilter(FSMFillForm.fill_year))
async def warning_not_year(message: Message):
    await message.answer(
        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ì–û–î!\n\n'
             '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - '
             '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel'
    )


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Ç–µ—Ö
# –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã, –≤–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message(StateFilter(default_state))
async def send_echo(message: Message):
    await message.reply(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ—è —Ç–≤–æ—è –Ω–µ –ø–æ–Ω–∏–º–∞—Ç—å')


if __name__ == '__main__':
    dp.run_polling(bot)
